96e4c6
                    +---------------------------+
		    |		CS 140          |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Chunyan Wang    <chunyan@stanford.edu>
Xiaojiang Guo   <gxj@stanford.edu>
Yinfeng Qin     <yinfeng@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We implemented sharing when multiple processes load the same executable file.
For each frame (managed by struct frame_struct as introduced later), we record
the user pages (managed by struct page_struct as introduced later) that
share this frame. We record the information in frame_struct about the
type of data the frame is containing, the location on disk of the original 
data, whether the data is read-only and so on. With these information, we
can identify user pages requesting the frame page containing the same 
executable file segments.

Each time in load_segment(), we traverse the frame table to find the frame
containing the same executable segments, and register this newly built
page structure to the frame. So later when this page faults, there is no need
to read from disk if the frame is already in memory, we can simply point to
that frame.

Sharing is made possible by our carefully designed frame table and page table
structure. From the beginning, we bear sharing in mind, so there is a list
in each frame structure recording all user pages pointing to this frame. Also,
whenever the frame is swapped in or out, we would make further effort to 
synchronize relevant information such as access/dirty bits in all relevant
frame and pages. As a result, when we come to implement sharing, the only 
extra effort needed is in identifying frames previously allocated that 
contains exactly the same executable file contents we need.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Frame table */
struct list frame_list;

/* Frame structure tracking a frame of data
   Unit structure making up the frame table*/
struct frame_struct
{
  uint32_t flag;                /* Flag bits */
  uint8_t *vaddr;               /* Virtual address if on memeory */
  size_t length;                /* Length of meaningful contents */
  block_sector_t sector_no;     /* Sector # if on disk or swap */
  struct list pte_list;         /* A list of pte's representing
                                   user pages sharing this frame */
  struct list_elem elem;
};

/* A unit structure representing page pte's
   sharing a common frame.
   Unit structure making up pte_list in frame strucutre */
struct pte_shared
{
  uint32_t *pte;
  struct list_elem elem;
};

/* Supplemental page table */
struct hash sup_pt;

/* A page structure corresponds to one user virtual page
   Unit structure making up supplemental page table */
struct page_struct
{
  uint32_t key;
  struct frame_struct *fs;
  struct hash_elem elem;
};

/* Swap device */
struct block *sp_device;

/* Swap table */
static struct bitmap *swap_free_map;


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We locate the frame by constructing a frame struct unit corresponding
to exactly one frame. The frame struct contains flag, which indicates whether
the frame is on disk, swap, or in memory. In the first two cases, the 
sector_no in frame struct is used to record the sector number on disk or 
swap. In the last case, vaddr in frame_struct is used to record the kernel 
virtual address of the frame.

Whenever a pte is given, it is first used as a key for the supplementary 
page table to locate the page struct, which in turn stores the frame struct.
With the frame struct, we can locate the data for a given page using the
sector_no if the flag indicates the page is on disk or swap, and using vaddr
is the flag indicates the page is in memory.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Our design coordinate dirty bits between kernel and user virtual addresses
that alias to the same frame by checking and updating the dirty bits. For
instance,any time (such as swap out, memory unmap or delete a pte from the
frame's pte list) we want to check a frame's dirty bit, we will first check
if any of the user virtual address or the kernel virtual address points to
the frame has ever been set to dirty. If any of the dirty bit is true, the
frame is treated as dirty.

The accessed bits are coordinated in much the same way as the dirty bits.
The only difference is that in the case of eviction, the accessed bits of all
the pte's sharing the same frame is updated to 0 if the evict_pointer
cycles to the frame.

Whenever we touches the actual pte in the page table, we would also flush TLB
to avoid a wrong TLB entry.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We use proper synchronization to ensure that two user processes get frame 
atomicly. Each frame in memory or on disk has a lock in its struct, so when
 user process requests a frame in memoery, it acquires the frame lock, which
 ensures that the two user program will not get the same page. Moreover, we
 also use device lock, i.e. file system lock and swap space lock to lock the
 reading from block, which ensures the two users program not loading data from
 the same device simultaneously. 

Note that our method not only prevent race condition that two user processes
 access the same resources, but also preserves the parallelism. For example, 
on user process swapping in a page from disk and another process swapping page
 from swap disk can operate simultaneously. We ensure each critical step,
 e.g. getting a page from eviction algorithm, loading page from device, is
 executed atomically.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Our major concern is the speed in querying information when conducting
VM routines. As a result, we choose to use hash table to implement
supplemental page table. Though the frame table is backed by a list, we do not
sacrifice performance since most frame query is done from the supplemental
page table entry, where a pointer is stored to directly reach this associated
frame strucutre.

A global frame table facilitates frame eviction algorithm. We implement the
frame table by a list structure, which makes it efficient for both dynamic
allocating and deleting, and circular traverse of the frame table.

A bitmap is used to manage swap slots. The management of swap slots is
straight forward since we know from the beginning the number of swap slots,
and the swap table only serves to find an available slot. So we borrow the
idea of palloc implementation of Pintos, and use bitmap to build the swap
table.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    ...
    void* user_esp;             /* User esp, saved before entering
                                   kernel mode, used by page fault
                                   handler in determining stack growth */
    void* stack_bound;          /* Stack bound, pages above which have
                                   previously been mapped, used to 
                                   determine stack growth */
    bool is_in_syscall;         /* Determining if thread is in syscall */
    ...
  };

/* "Hand" in clock algorithm for frame eviction */
struct frame_struct* evict_pointer;


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

In our design, the frame_struct is not conceptually the same as "frame" in
physical memory discussed in our class. Here we use frame_struct to
represent not only a kernel virtual page, be it in memory, on disk or swap.
This way we have a unified interface to track the position of each given 
page of data.

Our design uses clock algorithm to choose a frame to evict. A pointer 
evict_pointer is used to cycle through the frame table. When the pointer 
circles to an frame in memory, we examine whether the frame is suitable
to be evicted by calling the scan and reset function.

In the scan and reset function, access bits of all the pages pointing to the
frame is checked. If any of the access bits is 1, the frame is treated as 
access recently and not to be evicted for this time, but the access bits of
the pages pointing to this frame are reset to 0. If none of the access bits
of the pages pointing to the frame is 1, then the frame is chosen to be the
victim in this round of eviction.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

By our design, the frame strucutre represents a given page of data, whether
it is in memory, on disk or swap. For the example of this problem, when the
actual frame is obtained by P, the swapping algorithm would update the record
for the frame structure held by Q, indicating this page of data for Q is now
on disk, swap, or simply non-existence if it is all-zero. Then P can safely
use the physical frame previously used by Q. When Q gets back control and want
to read the data, page fault handler would call swap_in to retrieve the page
of data for Q.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

To decide whether a page fault for an invalid virtual address should cause the
stack to be extended, we provide the page fault handler with two information:
the lower boundary of the stack named as stack_bound, and the stack pointer of
the user process before the page fault happens.

Because we depend on page faults to detect invalid memory access, we need to
record the stack pointer if a page fault occurs in the kernel, since the 
processor only saves the stack pointer when an exception causes a switch from
user to kernel mode, reading esp out of the struct intr_frame passed to 
page_fault() would yield an undefined value.

We save esp in thread structure on the initial transition from user to kernel
mode. By doing so, we can record the user process's stack pointer before the
page fault handler begins working. Since the faulting address is invalid,
it is expected to be lower than the stack_bound. In addition, the faulting
address is expected to be higher than the 32 bytes below the stack pointer,
since the largest access below stack pointer is PUSHA, resulting in a decrese
of stack pointer by 32 bytes.  


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We use various locks from synchronization design. The locks are classified
 into 3 categories, data structure locks, device locks and table locks. 

Firstly, we implement list lock for frame list, hash lock for supplemental
page table, and bitmap lock for swap disk free map. This ensures that the
operations on those data structures will not be interleaved by other process.
And the require lock and release lock operation are added directly above and
below the instruction on those data structure. Therefore, we ensure that we
will never request a lock while holding a data structure lock. In other
words, the data structure locks are lowest in "priority", i.e. those held
at last. 

Secondly, we implement device lock for device operation, i.e. file system lock
and swap system lock. These locks are used to ensure that the loading data
between memory and devices are not interleaved by other process. We add
filesys lock for every filesys syscalls which access file system memory, and
also for swap in and out between memory and disk when page fault occurs. We
ensure that we will never request a lock while holding a device lock. This is
true for most cases. The only exception is that when page fault occurs in a
syscall, where we acquire the filesys device lock first. So in the page fault
handler, we use lock_held_by_current_thread () function to check whether the
filesys lock is held, and if so, we release it. This will cause no harm
because the data transfer between disk and memory has not yet started. And
after swapping in the page, and at the very end of the page fault handler,
we check if we have released the filesys, and if so, we re-acquire it. So it
appears to the user program as nothing happends, while at the same time
ensures that we never request a lock while holding a device lock. 

Thirdly, we implement table lock to synchronize the frame. Supplemental page
table is local respect to process, so we don't need to synchronize it. But
frame is accessed by shared process and by the fact that the eviction
algorithm may choose any user frame, so we add a lock in frame structure.
Note that here we avoid the global lock to allow parallelism. When a frame
structure content is accessed or modified, we add a lock require and release
above and below it. And in eviction algorithm, when we "consider" a frame to
be victim, we try_acquire the frame lock. If not successful, we go to the next
candidate, otherwise, we perform our algorithm as to whether choose this
candidate or not. If not, we release the frame lock, otherwise, we release
the frame lock after the frame is swapped out. For the page fault handler,
as soon as we get the frame infomation related to the fault address, we
acquire its frame lock, and release it after the page is loaded from the
memory.

We ensure that we never "get stuck" in a lock while holding a user frame lock.
Actually, the only way we can hold multiple user frame locks is through
acquiring a lock in page fault handler and another in eviction algorithm
considering candidates. So we use lock_try_acquire instread of lock_acquire
in eviction algorithm, and if failed, we ignore current candidates to avoid
deadlock. 

In this way, we can avoid deadlock. The necessary condition of deadlock is a
lock loop. Here for device and data structure locks, we ensure we never
acquire any other locks, so they cannot be in a lock loop; for frame lock, we
avoid such loop by lock_try_acquire. 


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

In eviction algorithm, we acquire the frame lock of the candidate we are
considering, and if we finally choose it, we will hold it till the data is
written to disk or swap space and according frame table set. On the other
hand, we protect the access and modification of the frame table by individual
frame locks too. So process Q will wait in the frame lock until P finishes
the eviction process. 

To avoid race between P evicting Q's frame and Q faulting the page back in,
in swap_in function, we ensure that the frame and page table are set AFTER
the data is actually written to the swap space. So such Q faulting on the
page only occurs when the data is completely on the disk or swap space. Q has
to wait in the frame lock in page fault handler till P finishes evictin gthe
frame. Then Q can safely swap in the page in need without causing problems. 


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Similar as the second question in B6, we makes sure that in swap_in
operation, the loading data from the disk or swap space to the memory occurs
before setting the page-table and frame-table. So this frame can only be
considered a candidate for eviction after setting the page table and frame
table, i.e. the flag is set such indicating the frame is actually in the
memory, so this implies the data is already fully loaded in the memory. So
this is fine. 

Also we ensure that the frame cannot be evicted if just read in memory. In
eviction, Q needs to acqire the frame lock to consider the candidate. If page
fault is in process, Q will wait till P completes, so Q will not racing to
access the ACCESS bit in the frame before P sets it to 1. This ensures
fairness.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We bring in the page from the disk or swap space by page faults. We do not
use "locking" to allow more flexibility of paging. 

When a syscall accesses memory on user's behalf, it only checks whether the
page is below the PHYS_BASE, so for unmapped memory access, a page fault may
occur. Such page faults are similar to those caused by users except that the
error_code indicates that the error is from the kernel. In order to
differentiate the on-user-behalf kernel page fault from real kernel page fault
which indicating a kernel bug, we use a flag in struct thread to indicate
whether the page fault is from a syscall or not. In entering syscalls, we set
the flag to be true, and in exiting syscalls, we set it to be false. And when
we enter the page fault handler, if the error code indicates it is from
kernel, then we check the flag, if true, then we deal the page fault in a
normal way as in user mode, otherwise, we panic the kernel as before. If the
syscall page faults on an invalid virtual address, we identify it as that in
user mode. 

In user mode, we identify the invalid address in the following way. First,
we check whether it is above PHYS_BASE, which is done in syscall. Secondly,
we check whether there is record on the supplemental page table, if not found,
we identify it as invalid address, if not identified as valid stack growth.


---- RATIONALE ----


>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We place great value on parallelism, so we don't use a global lock for
everything. For example, we use individual frame lock for each frame, which
enables other processes to process other rames while current process is doing
I/O, because current process is only holding the lock for this particular
frame.

In choosing the design, we first classify the locks into three categories,
the data structure locks, device locks and table locks. There is little
problem in implementing the first two kinds of locks, except we deal with
the special case about the holding filesys lock in page fault handler.
These will not cause any deadlock situation. For frame locks, this kind of
design is kind of complicate and error-prone, we avoid this by carefully
examing the temporal relationship of the function called. For example, the
path of race condition that is likely to occur is as follows:

page fault handler -> swap in (eviction algorithm -> swap_out -> data
write & set table) -> load data & set table value) 

so we use frame lock to lock those in parethesis, and frame lock to lock
the whole process.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Memory mapped file mapping information
   from mapid to file and address */
struct mmap_struct
  {
    int mapid;                  /* Mapped file id */
    struct file* p_file;        /* File struct from file_reopen() */
    void* vaddr;                /* Begin of vaddr for mmaped file */
    struct list_elem elem;
  };

struct thread
  {
    ...
    struct list mmap_list;      /* List of mmaped files */
    int next_mapid;             /* Next available mmaped file id */
    ...
  };


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Viewed abstractly, memory mapped files is just a special case of VM subsystem
where the file system disk serves as the swap device. There is not much 
difference other than that. As a result, we try to treat it the same in page
fault handler, and maximize the code shared by memory mapped file and demand-
paged executables.

In page fault handler, we make no special effort to serve memory mapped files.
The information needed are all recorded in our frame_struct, and we dispatch
to swap-in, swap-out and eviction code to deal with it.

When swapping in, we choose the block device to read according to the type
of data recorded in frame_struct. For memory mapped file the block device 
should be file system disk, while that for other pages are swap device. There
is no distinction other than that. So later we just read with given device
and sector number to fill the data in memory.

Similar logic holds when doing swap out. The only difference is still the
block device to write to. Other than that, we can use the same code to get
memory address and sector number, and conduct the swapping process.

With this design, we made no distinction in the eviction process. When 
evicting a frame, we just query the accessed bits to choose a frame to evict,
and the frames for memory mapped files is the same to others here.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

To determine whether a new file mapping overlaps with any of the 
existing segments, we looked up all the pages in the span of the file
size started from the virtual address provided by the user, to see if
any of the virtual address has been allocated a frame_struct by 
invoking function sup_pt_pte_lookup (). Determining whether a pte has 
corresponding entry in supplementary page table would become handy in this 
situation. If there is a supplementary page table entry for the virtual 
address, we know overlap occurs. The memory map syscall is then terminated 
by returning MAP_FAILED.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

In our design, we implement the swap and mmap by sharing all the code 
conducting the actually IO operations. To do so, we take advantage of the 
observation that the only difference between memory mapped file and demand-
paged executable file is that, while the mmap requires the file to be written
back to the original file on file system disk, the page-demanded executables
can be swapped back to swap space. At the same time, a single sector number 
variable recording the position either in swap space or disk is enough.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

In trying to merge the operations for memory mapped files and demand-paged
executables, we really learn a lot about the details of the filesys 
implementation on Pintos.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
